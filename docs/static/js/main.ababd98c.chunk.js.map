{"version":3,"sources":["app/styles.module.css","components/UploadButton/styles.module.css","components/UploadButton/index.js","app/App.js","features/counter/counterSlice.js","store/store.js","serviceWorker.js","containers/Gallery/index.js","index.js","constants/routes.js"],"names":["module","exports","UploadButton","props","onClick","className","styles","upbtn__wrap","upbtn","icon","faUpload","upbtn__icon","size","upbtn__text","App","useState","url","setUrl","fileInput","createRef","showErrorMessage","title","message","setTimeout","toastr","error","timeOut","newestOnTop","preventDuplicates","position","getState","state","transitionIn","transitionOut","closeOnToastrClick","app","app__form","app__fieldset","app__control_group","htmlFor","app__label","type","id","app__input","value","onChange","e","target","ref","accept","event","preventDefault","current","files","length","test","toFixed","fileReader","FileReader","readAsText","onload","JSON","parse","result","err","toString","onerror","counterSlice","createSlice","name","initialState","reducers","increment","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","toastrReducer","Boolean","window","location","hostname","match","Gallery","useEffect","ReactDOM","render","StrictMode","store","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ababd98c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"styles_app__eUpr-\",\"app__input\":\"styles_app__input__1chJH\",\"app__control_group\":\"styles_app__control_group__1jX3B\",\"app__label\":\"styles_app__label__3ZnuJ\",\"app__form\":\"styles_app__form__2RGCI\",\"app__fieldset\":\"styles_app__fieldset__rlyfz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"upbtn\":\"styles_upbtn__eRuLL\",\"upbtn-hover\":\"styles_upbtn-hover__3HQji\",\"abbbtn__wrap\":\"styles_abbbtn__wrap__2DabM\",\"upbtn__text\":\"styles_upbtn__text__2-2wz\",\"upbtn__icon\":\"styles_upbtn__icon__BjHN6\"};","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUpload } from '@fortawesome/free-solid-svg-icons';\r\nimport styles from './styles.module.css';\r\n\r\nfunction UploadButton(props) {\r\n  const { onClick } = props;\r\n  return (\r\n    <div className={styles.upbtn__wrap}>\r\n      <button className={styles.upbtn} onClick={onClick}>\r\n        <FontAwesomeIcon icon={faUpload} className={styles.upbtn__icon} size=\"1x\" />\r\n        <div className={styles.upbtn__text}>Загрузить</div>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UploadButton;\r\n","import React, { useState, createRef } from 'react';\r\nimport ReduxToastr, { toastr } from 'react-redux-toastr';\r\nimport styles from './styles.module.css';\r\nimport UploadButton from '../components/UploadButton';\r\nimport 'react-redux-toastr/lib/css/react-redux-toastr.min.css';\r\n\r\nfunction App() {\r\n  const [url, setUrl] = useState('');\r\n  const fileInput = createRef();\r\n\r\n  const showErrorMessage = (title, message) => {\r\n    setTimeout(() => {\r\n      toastr.error(title, message);\r\n    }, 0);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const { length, ...files } = fileInput.current.files;\r\n    let flagErr = false;\r\n\r\n    if (!url && length === 0) {\r\n      showErrorMessage('Ошибка', 'Данные для загрузки не найдены!');\r\n      return;\r\n    }\r\n\r\n    if (url) {\r\n      const myRegex = /(http(s?):)([/|.|\\w|\\s|-])*\\.(?:jpg|gif|png)/g;\r\n      if (!myRegex.test(url)) {\r\n        showErrorMessage('Ошибка', 'Ссылка не является картинкой!');\r\n        flagErr = true;\r\n      }\r\n    }\r\n\r\n    if (length !== 0) {\r\n      const size = (files[0].size / 1024 / 1024).toFixed(2);\r\n      if (size > 1) {\r\n        showErrorMessage('Ошибка', 'Размер файла не должен превышать 1Mb');\r\n        flagErr = true;\r\n        return;\r\n      }\r\n\r\n      const fileReader = new FileReader();\r\n      fileReader.readAsText(files[0], 'UTF-8');\r\n\r\n      fileReader.onload = (e) => {\r\n        try {\r\n          const value = JSON.parse(e.target.result);\r\n        } catch (err) {\r\n          showErrorMessage('Ошибка', err.toString());\r\n          flagErr = true;\r\n        }\r\n      };\r\n\r\n      fileReader.onerror = () => {\r\n        showErrorMessage('Ошибка', fileReader.error);\r\n        flagErr = true;\r\n      };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ReduxToastr\r\n        timeOut={4000}\r\n        newestOnTop={false}\r\n        preventDuplicates\r\n        position=\"top-left\"\r\n        getState={(state) => state.toastr}\r\n        transitionIn=\"fadeIn\"\r\n        transitionOut=\"fadeOut\"\r\n        closeOnToastrClick\r\n      />\r\n      <div className={styles.app}>\r\n        <form className={styles.app__form}>\r\n          <fieldset className={styles.app__fieldset}>\r\n            <div className={styles.app__control_group}>\r\n              <label htmlFor=\"url-input\" className={styles.app__label}>\r\n                Url\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"url-input\"\r\n                  className={styles.app__input}\r\n                  value={url}\r\n                  onChange={(e) => setUrl(e.target.value)}\r\n                />\r\n              </label>\r\n            </div>\r\n            <div className={styles.app__control_group}>\r\n              <label htmlFor=\"json-input\" className={styles.app__label}>\r\n                Json-файл\r\n                <input type=\"file\" id=\"json-input\" className={styles.app__input} ref={fileInput} accept=\".json\" />\r\n              </label>\r\n            </div>\r\n          </fieldset>\r\n          <UploadButton onClick={handleSubmit} />\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount) => (dispatch) => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = (state) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { reducer as toastrReducer } from 'react-redux-toastr';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    toastr: toastrReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the store load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web store is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different store. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { useEffect } from 'react';\r\n\r\nfunction Gallery() {\r\n  useEffect(() => {\r\n    // console.log('gallery');\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <h1>Hello Gallery</h1>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Gallery;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport App from './app/App';\r\nimport store from './store/store';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'normalize.css';\r\nimport * as routes from './constants/routes';\r\nimport Gallery from './containers/Gallery';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path={routes.MAIN} component={App} />\r\n          <Route exact path={routes.GALLERY} component={Gallery} />\r\n        </Switch>\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your store to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const MAIN = '/';\r\nexport const GALLERY = '/gallery';\r\n"],"sourceRoot":""}